{
	"info": {
		"_postman_id": "2153d6db-b7a9-48d4-89df-50f82a98a19f",
		"name": "padawan_hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "16659810"
	},
	"item": [
		{
			"name": "end_point_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{hw_2}}/first"
			},
			"response": []
		},
		{
			"name": "end_point_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json();",
							"const reqData = request.data;",
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response body name is Anna', function () {",
							"    pm.expect(resBody.name).to.eql('Anna');",
							"});",
							"",
							"pm.test('Response body age is 31', function () {",
							"    pm.expect(resBody.age).to.eql('31');",
							"});",
							"",
							"pm.test('Response body salary is 100000', function () {",
							"    pm.expect(resBody.salary).to.eql(100000);",
							"});",
							"",
							"pm.test('Response name equal request name', function () {",
							"    pm.expect(resBody.name).to.eql(reqData.name);",
							"});",
							"",
							"pm.test('Response age equal request age', function () {",
							"    pm.expect(resBody.age).to.eql(reqData.age);",
							"});",
							"",
							"pm.test('Response salary equal request salary', function () {",
							"    pm.expect(resBody.salary).to.eql(parseInt(reqData.salary));",
							"});",
							"",
							"console.log(resBody.family);",
							"",
							"pm.test('Response family salary equal request salary * 4', function () {",
							"    pm.expect(resBody.family.u_salary_1_5_year).to.eql(parseInt(reqData.salary) * 4);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{hw_2}}/user_info_3",
					"host": [
						"{{hw_2}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "end_point_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json();",
							"const reqData = request.data;",
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response name equal request name', function () {",
							"    pm.expect(resBody.name).to.eql(reqData.name);",
							"});",
							"",
							"pm.test('Response age equal request age', function () {",
							"    pm.expect(resBody.age).to.eql(reqData.age);",
							"});",
							"",
							"pm.test('Response salary equal request salary', function () {",
							"    pm.expect(resBody.salary).to.eql(parseInt(reqData.salary))",
							"});",
							"",
							"console.log(resBody.family);",
							"",
							"pm.test('The \\'dog\\' object should contain the \\'name\\' parameter', function () {",
							"    pm.expect(resBody.family.pets.dog).to.have.property('name');",
							"});",
							"",
							"pm.test('The \\'dog\\' name is \\'Lucky\\'', function () {",
							"    pm.expect(resBody.family.pets.dog.name).to.eql('Luky');",
							"});",
							"",
							"pm.test('The \\'dog\\' age is 4', function () {",
							"    pm.expect(resBody.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{hw_2}}/object_info_3?name=Anna&age=31&salary=100000",
					"host": [
						"{{hw_2}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "end_point_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json();",
							"const reqData = request.data;",
							"// приводим строку к массиву",
							"const reqDataSalaryArray = reqData.salary.split(',');",
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response name equal request name', function () {",
							"    pm.expect(resBody.name).to.eql(reqData.name);",
							"});",
							"",
							"pm.test('Response age equal request age', function () {",
							"    pm.expect(resBody.age).to.eql(parseInt(reqData.age));",
							"});",
							"",
							"console.log('reqDataSalaryArray', reqDataSalaryArray);",
							"console.log('resBody.salary', resBody.salary);",
							"console.log('resBody.salary[0]', resBody.salary[0]);",
							"console.log('resBody.salary[1]', resBody.salary[1]);",
							"console.log('resBody.salary[2]', resBody.salary[2]);",
							"",
							"pm.test('\\'0\\'salary parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody.salary[0]).to.eql(parseInt(reqDataSalaryArray[0]));",
							"});",
							"",
							"pm.test('\\'1\\'salary parameter is equal to the salary from request', function () {",
							"    pm.expect(parseInt(resBody.salary[1])).to.eql(parseInt(reqDataSalaryArray[1]));",
							"});",
							"",
							"pm.test('\\'2\\'salary parameter is equal to the salary from request', function () {",
							"    pm.expect(parseInt(resBody.salary[2])).to.eql(parseInt(reqDataSalaryArray[2]));",
							"});",
							"",
							"const resBodyName = resBody.name;",
							"const resBodyAge = resBody.age;",
							"const resBodySalary = resBody.salary;",
							"",
							"pm.environment.set('name', resBodyName);",
							"pm.environment.set('age', resBodyAge);",
							"pm.environment.set('salary', resBodySalary);",
							"pm.environment.set('salary_ep_5', resBodySalary[0]);",
							"",
							"for (const salary of resBodySalary) {",
							"  console.log(salary);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{hw_2}}/object_info_4?name=Anna&age=31&salary=100000",
					"host": [
						"{{hw_2}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "end_point_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json();",
							"const reqData = request.data;",
							"",
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Json response has \\'start_qa_salary\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('start_qa_salary');",
							"});",
							"",
							"pm.test('Json response has \\'qa_salary_after_6_months\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('qa_salary_after_6_months');",
							"});",
							"",
							"pm.test('Json response has \\'qa_salary_after_12_months\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('qa_salary_after_12_months');",
							"});",
							"",
							"pm.test('Json response has \\'qa_salary_after_1.5_year\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"",
							"pm.test('Json response has \\'qa_salary_after_3.5_years\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"",
							"pm.test('Json response has \\'person\\' parameter', function () {",
							"    pm.expect(resBody).to.have.property('person');",
							"});",
							"",
							"pm.test('\\'start_qa_salary\\' parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody.start_qa_salary).to.eql(parseInt(reqData.salary));",
							"});",
							"",
							"console.log('resBody.start_qa_salary', resBody.start_qa_salary);",
							"console.log('reqData.salary', reqData.salary);",
							"",
							"pm.test('\\'qa_salary_after_6_months\\' parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody.qa_salary_after_6_months).to.eql(parseInt(reqData.salary) * 2);",
							"});",
							"",
							"pm.test('\\'qa_salary_after_12_months\\' parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody.qa_salary_after_12_months).to.eql(parseInt(reqData.salary) * 2.7);",
							"});",
							"",
							"pm.test('\\'qa_salary_after_1.5_year\\' parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody['qa_salary_after_1.5_year']).to.eql(parseInt(reqData.salary) * 3.3);",
							"});",
							"",
							"pm.test('\\'qa_salary_after_3.5_years\\' parameter is equal to the salary from request', function () {",
							"    pm.expect(resBody['qa_salary_after_3.5_years']).to.eql(parseInt(reqData.salary) * 3.8);",
							"});",
							"",
							"pm.test('The first \\'u_name\\' parameter is equal to the salary from request', function () {",
							"pm.expect(resBody.person.u_name[1]).to.eql(parseInt(reqData.salary));",
							"});",
							"",
							"console.log('resBody.u_name[1]', resBody.person.u_name[1]);",
							"",
							"pm.test('\\'u_age\\' parameter is equal to the age from request', function () {",
							"pm.expect(resBody.person.u_age).to.eql(parseInt(reqData.age));",
							"});",
							"",
							"console.log('resBody.u_age', resBody.person.u_age);",
							"",
							"for (let item in resBody.person) {",
							"    console.log(resBody.person[item])};",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_ep_5}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{hw_2}}/user_info_2",
					"host": [
						"{{hw_2}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "hw_2",
			"value": "http://162.55.220.72:5005"
		}
	]
}